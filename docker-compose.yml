version: '3.8'

services:
  # NGINX API Gateway
  nginx:
    build:
      context: ./infrastructure/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app1
      - app2
      - app3
    networks:
      - coupon-network

  # MySQL Database
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: coupon_system
      MYSQL_USER: coupon_user
      MYSQL_PASSWORD: coupon_password
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./infrastructure/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - coupon-network

  # Redis Cluster Nodes (6 nodes: 3 masters + 3 slaves)
  redis-node-1:
    image: redis:7-alpine
    command: redis-server --port 7001 --cluster-enabled yes --cluster-config-file nodes-7001.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "7001:7001"
    volumes:
      - redis-node-1-data:/data
    networks:
      - coupon-network

  redis-node-2:
    image: redis:7-alpine
    command: redis-server --port 7002 --cluster-enabled yes --cluster-config-file nodes-7002.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "7002:7002"
    volumes:
      - redis-node-2-data:/data
    networks:
      - coupon-network

  redis-node-3:
    image: redis:7-alpine
    command: redis-server --port 7003 --cluster-enabled yes --cluster-config-file nodes-7003.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "7003:7003"
    volumes:
      - redis-node-3-data:/data
    networks:
      - coupon-network

  redis-node-4:
    image: redis:7-alpine
    command: redis-server --port 7004 --cluster-enabled yes --cluster-config-file nodes-7004.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "7004:7004"
    volumes:
      - redis-node-4-data:/data
    networks:
      - coupon-network

  redis-node-5:
    image: redis:7-alpine
    command: redis-server --port 7005 --cluster-enabled yes --cluster-config-file nodes-7005.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "7005:7005"
    volumes:
      - redis-node-5-data:/data
    networks:
      - coupon-network

  redis-node-6:
    image: redis:7-alpine
    command: redis-server --port 7006 --cluster-enabled yes --cluster-config-file nodes-7006.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "7006:7006"
    volumes:
      - redis-node-6-data:/data
    networks:
      - coupon-network

  # Redis Cluster Initialization
  redis-cluster-init:
    image: redis:7-alpine
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    command: |
      sh -c "
      sleep 10
      redis-cli --cluster create \
        redis-node-1:7001 \
        redis-node-2:7002 \
        redis-node-3:7003 \
        redis-node-4:7004 \
        redis-node-5:7005 \
        redis-node-6:7006 \
        --cluster-replicas 1 \
        --cluster-yes
      "
    networks:
      - coupon-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - coupon-network

  # Kafka Brokers (3 brokers for HA)
  kafka-1:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    volumes:
      - kafka-1-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - coupon-network

  kafka-2:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    volumes:
      - kafka-2-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29093"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - coupon-network

  kafka-3:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    volumes:
      - kafka-3-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29094"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - coupon-network

  # Kafka Topic Initialization
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    command: |
      sh -c "
      sleep 30
      kafka-topics --bootstrap-server kafka-1:29092 --create --topic coupon-events --partitions 6 --replication-factor 3 --if-not-exists
      kafka-topics --bootstrap-server kafka-1:29092 --create --topic coupon-events-dlq --partitions 3 --replication-factor 3 --if-not-exists
      "
    networks:
      - coupon-network

  # Python Application Instances (3 replicas for load balancing)
  app1:
    build:
      context: .
      dockerfile: app/Dockerfile
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=coupon_user
      - DB_PASSWORD=coupon_password
      - DB_NAME=coupon_system
      - REDIS_HOST_1=redis-node-1
      - REDIS_PORT_1=7001
      - REDIS_HOST_2=redis-node-2
      - REDIS_PORT_2=7002
      - REDIS_HOST_3=redis-node-3
      - REDIS_PORT_3=7003
      - KAFKA_HOST_1=kafka-1
      - KAFKA_PORT_1=29092
      - KAFKA_HOST_2=kafka-2
      - KAFKA_PORT_2=29093
      - KAFKA_HOST_3=kafka-3
      - KAFKA_PORT_3=29094
    depends_on:
      - mysql
      - redis-cluster-init
      - kafka-init
    networks:
      - coupon-network

  app2:
    build:
      context: .
      dockerfile: app/Dockerfile
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=coupon_user
      - DB_PASSWORD=coupon_password
      - DB_NAME=coupon_system
      - REDIS_HOST_1=redis-node-1
      - REDIS_PORT_1=7001
      - REDIS_HOST_2=redis-node-2
      - REDIS_PORT_2=7002
      - REDIS_HOST_3=redis-node-3
      - REDIS_PORT_3=7003
      - KAFKA_HOST_1=kafka-1
      - KAFKA_PORT_1=29092
      - KAFKA_HOST_2=kafka-2
      - KAFKA_PORT_2=29093
      - KAFKA_HOST_3=kafka-3
      - KAFKA_PORT_3=29094
    depends_on:
      - mysql
      - redis-cluster-init
      - kafka-init
    networks:
      - coupon-network

  app3:
    build:
      context: .
      dockerfile: app/Dockerfile
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=coupon_user
      - DB_PASSWORD=coupon_password
      - DB_NAME=coupon_system
      - REDIS_HOST_1=redis-node-1
      - REDIS_PORT_1=7001
      - REDIS_HOST_2=redis-node-2
      - REDIS_PORT_2=7002
      - REDIS_HOST_3=redis-node-3
      - REDIS_PORT_3=7003
      - KAFKA_HOST_1=kafka-1
      - KAFKA_PORT_1=29092
      - KAFKA_HOST_2=kafka-2
      - KAFKA_PORT_2=29093
      - KAFKA_HOST_3=kafka-3
      - KAFKA_PORT_3=29094
    depends_on:
      - mysql
      - redis-cluster-init
      - kafka-init
    networks:
      - coupon-network

  # Consumer Service (2 replicas for HA)
  consumer1:
    build:
      context: .
      dockerfile: consumer/Dockerfile
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=coupon_user
      - DB_PASSWORD=coupon_password
      - DB_NAME=coupon_system
      - KAFKA_HOST_1=kafka-1
      - KAFKA_PORT_1=29092
      - KAFKA_HOST_2=kafka-2
      - KAFKA_PORT_2=29093
      - KAFKA_HOST_3=kafka-3
      - KAFKA_PORT_3=29094
    depends_on:
      mysql:
        condition: service_started
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
    networks:
      - coupon-network

  consumer2:
    build:
      context: .
      dockerfile: consumer/Dockerfile
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=coupon_user
      - DB_PASSWORD=coupon_password
      - DB_NAME=coupon_system
      - KAFKA_HOST_1=kafka-1
      - KAFKA_PORT_1=29092
      - KAFKA_HOST_2=kafka-2
      - KAFKA_PORT_2=29093
      - KAFKA_HOST_3=kafka-3
      - KAFKA_PORT_3=29094
    depends_on:
      mysql:
        condition: service_started
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
    networks:
      - coupon-network

volumes:
  mysql-data:
  redis-node-1-data:
  redis-node-2-data:
  redis-node-3-data:
  redis-node-4-data:
  redis-node-5-data:
  redis-node-6-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-1-data:
  kafka-2-data:
  kafka-3-data:

networks:
  coupon-network:
    driver: bridge